#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import requests
import shutil
from urllib.parse import urlparse
import json

class HubHarvester:
  def __init__(self, resource_type, api_url, output_dir):
    self.resource_type = resource_type  # 'map' or 'screenshot'
    self.api_url = api_url
    self.output_dir = output_dir
    os.makedirs(self.output_dir, exist_ok=True)
  
  def clean_output_dir(self):
    for filename in os.listdir(self.output_dir):
      if filename == "index.md":
        continue
      file_path = os.path.join(self.output_dir, filename)
      try:
        if os.path.isfile(file_path) or os.path.islink(file_path):
          os.unlink(file_path)
        elif os.path.isdir(file_path):
          shutil.rmtree(file_path)
      except Exception as e:
        print(f"Failed to delete {file_path}. Reason: {e}")

  def fetch_resources(self):
    next_page = self.api_url
    while next_page:
      response = requests.get(next_page)
      response.raise_for_status()
      data = response.json()

      for item in data.get("results", []):
        if item.get("is_publishable"):
          self.process_resource(item)

      next_page = data.get("next")

  def process_resource(self, item):
    name = item["name"]
    description = item["description"]
    creator = item["creator"]
    item_id = item["id"]
    upload_date = item["upload_date"]
    link = item["file"]
    thumbnail_url = item["thumbnail"]
    uuid = item["uuid"]

    # Parse the thumbnail URL to get the file name
    path = urlparse(thumbnail_url).path
    image_ext = os.path.splitext(path)[1]
    image_name = f"{uuid}{image_ext}"

    # Download the thumbnail
    image_path = os.path.join(self.output_dir, image_name)
    self.download_file(thumbnail_url, image_path)

    # Generate the hub link based on resource type
    if self.resource_type == "map":
      hub_link = f"https://hub.qgis.org/map-gallery/{item_id}"
    else:  # screenshot
      hub_link = f"https://hub.qgis.org/screenshots/{item_id}"

    # Generate the markdown content
    content = f"""---
# ⚠️  AUTOMATED FILE - DO NOT EDIT MANUALLY!
# Generated by: scripts/hub_images_harvest.py
# Source: https://hub.qgis.org API
# To update: Run 'scripts/hub_images_harvest.py'
# See CONTRIBUTING.md section: Automated Content and Manual Edit Guidelines

source: "hub"
title: "{name}"
description: {json.dumps(description.strip())}
creator: "{creator.strip()}"
image: "{image_name}"
date: "{upload_date}"
link: "{link}"
hub_link: "{hub_link}"
draft: "false"
showcase: "{self.resource_type}"
---
"""
    # Write the markdown file
    md_filename = os.path.join(self.output_dir, f"{uuid}.md")
    with open(md_filename, "w", encoding="utf-8") as f:
      f.write(content)
      print(f"{self.resource_type.capitalize()} markdown file created: {md_filename}")

  def download_file(self, url, dest_path):
    response = requests.get(url, stream=True)
    response.raise_for_status()
    with open(dest_path, "wb") as out_file:
      shutil.copyfileobj(response.raw, out_file)
    print(f"Downloaded: {dest_path}")

if __name__ == "__main__":
  api_url = "https://hub.qgis.org/api/v1/resources/"

  # Map harvesting
  map_api_url = f"{api_url}?resource_type=map"
  map_output_dir = "content/hub-maps"
  
  print("Harvesting maps from QGIS Hub...")
  map_harvester = HubHarvester(resource_type="map", api_url=map_api_url, output_dir=map_output_dir)
  map_harvester.clean_output_dir()
  map_harvester.fetch_resources()
  
  # Screenshot harvesting
  screenshot_api_url = f"{api_url}?resource_type=screenshot"
  screenshot_output_dir = "content/hub-screenshots"
  
  print("\nHarvesting screenshots from QGIS Hub...")
  screenshot_harvester = HubHarvester(resource_type="screenshot", api_url=screenshot_api_url, output_dir=screenshot_output_dir)
  screenshot_harvester.clean_output_dir()
  screenshot_harvester.fetch_resources()
  
  print("\nHarvesting completed!")